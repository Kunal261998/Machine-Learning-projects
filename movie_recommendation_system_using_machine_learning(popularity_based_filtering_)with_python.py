# -*- coding: utf-8 -*-
"""Movie Recommendation System using Machine Learning(popularity based filtering )with Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OY_GMMnL4Zs_b7Ef_wlJArt9jG7Rmt_Z
"""



"""**Imported dependent libraries**"""

import pandas as pd
import numpy as np
import difflib      #this is used to take close match entered by user to avoid mistake )
from sklearn.feature_extraction.text import TfidfVectorizer #(TfidfVectorizer used to convet textual date to numerical i.e featured vector like one hot encoder)
from sklearn.metrics.pairwise import cosine_similarity #(cosine_similarity_algo used to give similarity score)

"""**Data Cleaning and preprocessing**"""

# loading the data from the csv file to apandas dataframe
movies_data = pd.read_csv('/content/movies_list.csv')

# printing the first 5 rows of the dataframe
movies_data.head(5)

# checking number of rows and columns in the data frame

movies_data.shape

# selecting the important features which willb used for recommendation

selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

pd.isnull(selected_features).sum()

# checking and replacing the null valuess with null string

for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

# combined all the 5 selected features in single dataframe

combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']
print(combined_features)

# converting the text data to numerical feature vectors so predication could be accurate

vectorizer = TfidfVectorizer() #initialization of obj from class
feature_vectors = vectorizer.fit_transform(combined_features)
print(feature_vectors)

"""**Cosine Similarity algo for popularity based sampling**"""

# getting the similarity scores using cosine similarity

similarity = cosine_similarity(feature_vectors)
print(similarity)
print(similarity.shape)

"""**Getting the movie name from the user**"""

# getting the movie name from the user

movie_name = input('Please,Enter your favourite movie name : ')

# creating a list with all the similar movie names given in the dataset

list_of_all_movies_titles = movies_data['title'].tolist()
print(list_of_all_movies_titles)

# finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movie_name, list_of_all_movies_titles)
print(find_close_match)

#Finding the best suited movie
close_match = find_close_match[0]
print(close_match)

# finding the index of the movie with title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

# getting a list of similar movies

similarity_score = list(enumerate(similarity[index_of_the_movie]))   #enumerate used as loop to check in list
print(similarity_score)
len(similarity_score)

# sorting the movies based on their similarity score

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) # x is list and 1 means simliarty score index 
print(sorted_similar_movies)

# print the name of similar movies based on the index

print('Best Movies suggested for you are : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<=20):  #top 20
    print(i, '.',title_from_index)
    i+=1

"""Conclusion:

We have created a movie recommendation machine learning model based on cosine similarity algo which can suggest top 20 movies based on genre and when user entered there movie name .

Also we have trained our model with data set having 4803 rows and 24 columns i.e featured.

We did data cleaning and pre processing .
"""